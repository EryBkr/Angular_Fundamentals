{
    "pipes": [
        {
            "name": "FilteringPipe",
            "id": "pipe-FilteringPipe-828797dade15363c1b834468f8e38c81",
            "file": "src/lib/custom-pipes/filtering.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "string[]"
                        },
                        {
                            "name": "args",
                            "type": "unknown[]",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 8,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "unknown[]",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "filtering",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'filtering'\n})\nexport class FilteringPipe implements PipeTransform {\n\n  transform(value: string[], ...args: unknown[]): unknown {\n    let result:any[]=[];\n\n    value.forEach(element => {\n      //Parametrenin 0 ncı elemanı bize gönderdiğimiz parametreyi dönmektedir.\n      //Biz bu parametreyi her bir şehir için kontrol edip dahil ise result array ine atıyoruz\n      //Akabinde result u dönüyoruz ve işlem tamam\n      const isExistLetter=element.includes(args[0].toString());\n      if(isExistLetter){\n        result.push(element);\n      }\n    });\n\n    return result;\n  }\n\n}\n"
        },
        {
            "name": "TlConvertPipe",
            "id": "pipe-TlConvertPipe-350991c1b3eb7210a22be2df4e1798bc",
            "file": "src/lib/custom-pipes/tl-convert.pipe.ts",
            "type": "pipe",
            "description": "",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "value",
                            "type": "unknown"
                        },
                        {
                            "name": "args",
                            "type": "unknown[]",
                            "dotDotDotToken": true
                        }
                    ],
                    "optional": false,
                    "returnType": "unknown",
                    "typeParameters": [],
                    "line": 12,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "unknown",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "args",
                            "type": "unknown[]",
                            "dotDotDotToken": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "tlConvert",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\n\n//Custom pipe işlemlerini tanımladığımız ts dosyasıdır\n//ng g pipe tlConvert --skip-import komutu ile otomatik oluşturulmaktadır\n\n@Pipe({\n  name: 'tlConvert'\n})\nexport class TlConvertPipe implements PipeTransform {\n//value pipe a gönderilen değer,args ise pipe ın ekstra özellikleri olabilir.\n//Birçok pipe da ekstra özellik mevcuttur\n  transform(value: unknown, ...args: unknown[]): unknown {\n    return \"₺\" +value+\" mevcut para\";\n  }\n\n}\n"
        }
    ],
    "interfaces": [
        {
            "name": "city",
            "id": "interface-city-b69ce115675bdf2458aafcabbd40f060",
            "file": "src/lib/services/map.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n//Ekleme işlemi için model oluşturduk\ninterface city{\n  id:number,\n  name:string,\n  plaka:number,\n  region:string\n}\n\n//ng g service serviceName ile servisimizi oluşturduk\n@Injectable({\n  providedIn: 'root'\n})\nexport class MapService {\n\n  cities=[\n    {\n      id:1,\n      name:\"İstanbul\",\n      region:\"Marmara\",\n      plaka:34\n    },\n    {\n      id:2,\n      name:\"Eskişehir\",\n      region:\"Ege\",\n      plaka:26\n    },\n    {\n      id:3,\n      name:\"Ankara\",\n      region:\"İç Anadolu\",\n      plaka:6\n    }\n  ];\n\n  //Subscribe olabileceğimiz data tiplerini tanımladık.\n  //Böylelikle diğer componentler de data değişikliklerini anlık olarak gösterebilecek\n  public cityNameSubject=new Subject<any>();\n  public cityPlakaSubject=new Subject<any>();\n  public cityRegionSubject=new Subject<any>();\n\n  constructor() { }\n\n  //Şehirler dizimizin id ve name değerlerini dönen fonksiyon\n  getCityName(){\n    const data= this.cities.map(elem=>({\n      id:elem.id,\n      name:elem.name\n    }));\n\n    this.cityNameSubject.next(data);\n  }\n\n  //Şehirler dizimizin id,plaka ve name değerlerini dönen fonksiyon\n  getPlakas(){\n    const data= this.cities.map(elem=>({\n      id:elem.id,\n      plaka:elem.plaka,\n      name:elem.name\n    }));\n\n    this.cityPlakaSubject.next(data);\n  }\n\n   //Şehirler dizimizin id,bölge ve name değerlerini dönen fonksiyon\n  getRegions(){\n    const data= this.cities.map(elem=>({\n      id:elem.id,\n      name:elem.name,\n      region:elem.region\n    }));\n\n    this.cityRegionSubject.next(data);\n  }\n\n  //Şehir kaydet ya da güncelle\n  save(value:city){\n    const index=this.cities.findIndex(el=>el.id===value.id);\n\n    if(index>-1){\n      this.cities[index]=value;\n    }\n    else{\n      this.cities.push(value);\n    }\n\n    //Değişikliklerin componentlere anlık olarak yansıması için save metodundan sonra tekrar çağırdık\n    this.getCityName();\n    this.getPlakas();\n    this.getRegions();\n\n\n  }\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "plaka",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "region",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "MapService",
            "id": "injectable-MapService-b69ce115675bdf2458aafcabbd40f060",
            "file": "src/lib/services/map.service.ts",
            "properties": [
                {
                    "name": "cities",
                    "defaultValue": "[\n    {\n      id:1,\n      name:\"İstanbul\",\n      region:\"Marmara\",\n      plaka:34\n    },\n    {\n      id:2,\n      name:\"Eskişehir\",\n      region:\"Ege\",\n      plaka:26\n    },\n    {\n      id:3,\n      name:\"Ankara\",\n      region:\"İç Anadolu\",\n      plaka:6\n    }\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "cityNameSubject",
                    "defaultValue": "new Subject<any>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "cityPlakaSubject",
                    "defaultValue": "new Subject<any>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "cityRegionSubject",
                    "defaultValue": "new Subject<any>()",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getCityName",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48
                },
                {
                    "name": "getPlakas",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58
                },
                {
                    "name": "getRegions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69
                },
                {
                    "name": "save",
                    "args": [
                        {
                            "name": "value",
                            "type": "city"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "city",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n//Ekleme işlemi için model oluşturduk\ninterface city{\n  id:number,\n  name:string,\n  plaka:number,\n  region:string\n}\n\n//ng g service serviceName ile servisimizi oluşturduk\n@Injectable({\n  providedIn: 'root'\n})\nexport class MapService {\n\n  cities=[\n    {\n      id:1,\n      name:\"İstanbul\",\n      region:\"Marmara\",\n      plaka:34\n    },\n    {\n      id:2,\n      name:\"Eskişehir\",\n      region:\"Ege\",\n      plaka:26\n    },\n    {\n      id:3,\n      name:\"Ankara\",\n      region:\"İç Anadolu\",\n      plaka:6\n    }\n  ];\n\n  //Subscribe olabileceğimiz data tiplerini tanımladık.\n  //Böylelikle diğer componentler de data değişikliklerini anlık olarak gösterebilecek\n  public cityNameSubject=new Subject<any>();\n  public cityPlakaSubject=new Subject<any>();\n  public cityRegionSubject=new Subject<any>();\n\n  constructor() { }\n\n  //Şehirler dizimizin id ve name değerlerini dönen fonksiyon\n  getCityName(){\n    const data= this.cities.map(elem=>({\n      id:elem.id,\n      name:elem.name\n    }));\n\n    this.cityNameSubject.next(data);\n  }\n\n  //Şehirler dizimizin id,plaka ve name değerlerini dönen fonksiyon\n  getPlakas(){\n    const data= this.cities.map(elem=>({\n      id:elem.id,\n      plaka:elem.plaka,\n      name:elem.name\n    }));\n\n    this.cityPlakaSubject.next(data);\n  }\n\n   //Şehirler dizimizin id,bölge ve name değerlerini dönen fonksiyon\n  getRegions(){\n    const data= this.cities.map(elem=>({\n      id:elem.id,\n      name:elem.name,\n      region:elem.region\n    }));\n\n    this.cityRegionSubject.next(data);\n  }\n\n  //Şehir kaydet ya da güncelle\n  save(value:city){\n    const index=this.cities.findIndex(el=>el.id===value.id);\n\n    if(index>-1){\n      this.cities[index]=value;\n    }\n    else{\n      this.cities.push(value);\n    }\n\n    //Değişikliklerin componentlere anlık olarak yansıması için save metodundan sonra tekrar çağırdık\n    this.getCityName();\n    this.getPlakas();\n    this.getRegions();\n\n\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 43
            },
            "type": "injectable"
        },
        {
            "name": "RoleService",
            "id": "injectable-RoleService-00256011b9f1adf230643e3d414224c0",
            "file": "src/lib/services/role.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "environment.api.nestjs.role",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methods": [
                {
                    "name": "addRole",
                    "args": [
                        {
                            "name": "role",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 23,
                    "jsdoctags": [
                        {
                            "name": "role",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteRole",
                    "args": [
                        {
                            "name": "id",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllRoles",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 17
                },
                {
                    "name": "updateRole",
                    "args": [
                        {
                            "name": "role",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "name": "role",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RoleService {\n\n  //Environments dosyamda ki base url i alıyorum\n  baseUrl = environment.api.nestjs.role;\n\n  //Module tarafında eklemiş olduğum http modülünü DI ile oluşturuyorum\n  constructor(private http: HttpClient) { }\n\n  //Bu metot observable<model> dönecek bu yüzden component tarafında subscribe olmamız gerekiyor\n  getAllRoles() {\n    //http modulünü kullanarak ve gerekli endpoint i vererek get isteğimi yapıyorum\n    return this.http.get<any>(this.baseUrl);\n}\n\n//Post isteğinde doğal olarak post edeceğimiz datayıda vermemiz gerekiyor\naddRole(role:any){\n  return this.http.post<any>(this.baseUrl,role);\n}\n\n//Put isteğinde doğal olarak put edeceğimiz datayıda vermemiz gerekiyor\n//url/{id} şeklinde istek atmamız gerekiyor\nupdateRole(role:any){\n  return this.http.put<any>(this.baseUrl+`/${role.id}`,role);\n}\n\n//delete isteğinde doğal olarak id göndermemiz gerekiyor\n//url/{id} şeklinde istek atmamız gerekiyor\ndeleteRole(id:any){\n  return this.http.delete<any>(this.baseUrl+`/${id}`);\n}\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "UserService",
            "id": "injectable-UserService-04824ce9aa986a9d6223ec52d1e3f7eb",
            "file": "src/lib/services/user.service.ts",
            "properties": [
                {
                    "name": "isLogIn",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "users",
                    "defaultValue": "[\"eray\", \"berkay\"]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methods": [
                {
                    "name": "getToken",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 47
                },
                {
                    "name": "isExistName",
                    "args": [
                        {
                            "name": "val",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "val",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 31
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { of } from 'rxjs';\n\n\n\n//ng g service [name] komutu ile servis oluşturduk\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n\n  //Bu isimler api tarafında varmış olarak kabul edelim.Buna göre kontrol edeceğiz\n  users = [\"eray\", \"berkay\"];\n\n  //Login durumunu kontrol edecek değişken\n  isLogIn = false;\n\n  constructor(private http: HttpClient) { }\n\n  isExistName(val: string) {\n    //Gönderdiğimiz username api tarafında kayıtlı mı ?\n    if (this.users.indexOf(val) > -1) {\n      return of(true); //of operatorü değişkenleri observable hale getiriyor\n    }\n    return of(false);\n  }\n\n  //Login servisine username ve password gönderiyoruz\n  login() {\n\n    const user = {\n      \"username\": \"name\",\n      \"password\": \"123\"\n    };\n    //Geriye dönen değer token içerecektir (giriş başarılı ise)\n    return this.http.post<any>(\"environment tarafından alınacak url\", user);\n  }\n\n  logout(){\n    //token bilgimizi sildik\n    localStorage.removeItem(\"token\");\n  }\n\n\n  getToken() {\n    //Local Storage de olmasını beklediğim token i alıyorum\n    const token = localStorage.getItem(\"token\");\n\n    //Token mevcut ise dönüyorum\n    if (token)\n      return token;\n    //Mevcur değilse login metodumu çağırıp tokeni Local Storage ye kaydediyorum\n    //Sonrasında metodumu tekrar çalıştırarak token bilgisini dönmüş oluyorum\n    else {\n      this.login().subscribe(data => {\n        localStorage.setItem(\"token\", data);\n        this.getToken();\n      });\n\n    }\n  }\n\n}\n\n\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "HighlightDirective",
            "id": "directive-HighlightDirective-7cb3b55a0f3f1edbfbcb2235c6d7b900",
            "file": "src/lib/custom-directives/highlight.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import { Directive, ElementRef, HostListener, Input } from '@angular/core';\n\n@Directive({\n  selector: '[appHighlight]'\n})\n\n//Custom directive oluşturacağımız ts dosyası\n//ng g directive 'directive name' --skip-import komutu ile oluşturuyoruz\n\nexport class HighlightDirective {\n\n  @Input() myColor:string; //Directive parametre göndermek istersek bu şekilde kullanabiliriz\n\n  constructor(private element:ElementRef) {\n    //element.nativeElement.style.backgroundColor=\"yellow\";\n    //Bu arkadaş kullanıldığı elementin arka planını sarı yapar\n   }\n\n   //Mouse hareketlerine göre de görsel dinamiklik kazandırılabilir\n   //Bu örnekte component tarafından gelen değeri custom directive dosyamıza göndermiş olduk\n   @HostListener('mouseover') onMouseOver() {\n    this.element.nativeElement.style.backgroundColor=\"green\";\n  }\n  @HostListener('mouseleave') onMouseLeave() {\n    this.element.nativeElement.style.backgroundColor=this.myColor;\n  }\n\n}\n",
            "selector": "[appHighlight]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "myColor",
                    "line": 12,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "mouseleave",
                    "args": [],
                    "argsDecorator": [],
                    "line": 24
                },
                {
                    "name": "mouseover",
                    "args": [],
                    "argsDecorator": [],
                    "line": 21
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "element",
                        "type": "ElementRef"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "element",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-d85863c8f85d1fdd017575f555e26df3",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'angTutorial'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "translateService",
                    "type": "TranslateService",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        114
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41
                },
                {
                    "name": "setLanguage",
                    "args": [
                        {
                            "name": "lang",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showSuccess",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { ToastrService } from 'ngx-toastr';\nimport { NgxSpinnerService } from \"ngx-spinner\";\nimport { TranslateService } from '@ngx-translate/core';\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n  title = 'angTutorial';\n\n  //DI ile servislerimizi ekliyoruz\n  constructor(private toastr: ToastrService,\n    private spinner: NgxSpinnerService,\n    public translateService: TranslateService) {\n    //Proje çalışır çalışmaz dil ataması yapabiliriz\n    translateService.setDefaultLang(\"en\");\n    translateService.use(\"en\");\n  }\n\n  showSuccess() {\n    //Gerekli Translate mesajını ilettik\nthis.translateService.onLangChange.subscribe(response=>{\n  const message=this.translateService.instant(\"toastr.message\");\n  this.toastr.success('Hello world!', message);\n});\n\n\n    /** spinner starts on init */\n    this.spinner.show();\n\n    setTimeout(() => {\n      /** spinner ends after 5 seconds */\n      this.spinner.hide();\n    }, 5000);\n  }\n\n  ngOnInit(): void { //Component yüklendiği an çalışacak olan metottur. Lifecycle 'ın bir parçasıdır\n    this.showSuccess();\n  }\n\n  //Navbardan seçilen değer alındı\n  setLanguage(lang: string) {\n    this.translateService.use(lang);\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "toastr",
                        "type": "ToastrService"
                    },
                    {
                        "name": "spinner",
                        "type": "NgxSpinnerService"
                    },
                    {
                        "name": "translateService",
                        "type": "TranslateService"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "toastr",
                        "type": "ToastrService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "spinner",
                        "type": "NgxSpinnerService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "translateService",
                        "type": "TranslateService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!-- Navbar compenentimizi buraya çağırdık -->\n<app-navbar [lang]=\"translateService.currentLang\" (langChange)=\"setLanguage($event);\"></app-navbar>\n\n<div class=\"row\">\n  <div class=\"col-md-3\">\n    <!-- Sidebar compenentimizi buraya çağırdık -->\n    <app-sidebar></app-sidebar>\n    <!-- <ul>\n\n      <li routerLink=\"home\">Go To Home</li>\n      <li routerLink=\"role\">Go To Role</li>\n      <li routerLink=\"user\">Go To User</li>\n      <li [routerLink]=\"['user',7]\">Go To  User 7 Detail</li>\n      <li [routerLink]=\"['user',7,'role']\">Go To  User 7 Role</li>\n       query string ya da route data tanımlamaları var ise yukarıdaki şekilde kullanıyoruz\n\n    </ul> -->\n  </div>\n  <div class=\"col-md-9\">\n    <router-outlet></router-outlet>\n  </div>\n</div>\n\n\n\n  <!--router-outlet mvc de ki @Html.RenderAction gibi çalışmaktadır -->\n  <!--static olarak çağırmak istersek <app-componenet></app-component> olarak çağırılır -->\n\n<!-- <ngx-spinner></ngx-spinner>\nSpinnerın oluşacağı kısmı seçtik -->\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-642c6c4e474cd5a0ac760dfda26b2fc9",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "Child1Component",
            "id": "component-Child1Component-4d4d0d21d9d7cae06c7a82c473449049",
            "file": "src/lib/chilld-components/child1/child1.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-child1",
            "styleUrls": [
                "./child1.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./child1.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "data",
                    "line": 14
                }
            ],
            "outputsClass": [
                {
                    "name": "resetForm",
                    "defaultValue": "new EventEmitter()",
                    "line": 18,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "alertChild",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\n\n\n@Component({\n  selector: 'app-child1',\n  templateUrl: './child1.component.html',\n  styleUrls: ['./child1.component.scss']\n})\nexport class Child1Component implements OnInit {\n\n  constructor() { }\n\n  //Parent componentten gelen datayı yakalamak için input ön ekini kullandık\n  @Input() data;\n\n\n  //Parent a data göndermek için kullanılır\n  @Output() resetForm: EventEmitter<any> = new EventEmitter();\n\n\n\n  ngOnInit(): void {\n  }\n\n\n\n  alertChild(){\n    alert(\"Child Tetiklendi\");\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./child1.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>Parent 1 Componentimizden gelen data objesini child1 componentte gösterdik</p>\n<p>Parent Componentten Gelen Değer : {{data.name}} {{data.status}}</p>\n\n\n<!-- output nesnemiz parent ı tetikleyecek ve istediğimiz bir data gönderecek -->\n<button (click)=\"resetForm.emit(data.name)\">Resetle</button>\n"
        },
        {
            "name": "CityComponent",
            "id": "component-CityComponent-addac2ebb62cbb102505fab9127e1099",
            "file": "src/app/map/city/city.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-city",
            "styleUrls": [
                "./city.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./city.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "citiesData",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { MapService } from 'src/lib/services/map.service';\n\n@Component({\n  selector: 'app-city',\n  templateUrl: './city.component.html',\n  styleUrls: ['./city.component.scss']\n})\nexport class CityComponent implements OnInit {\n\n  citiesData;\n\n  //DI ile servisimizi ekledik\n  constructor(private mapService:MapService) {\n    //CityNameSubject in her değişikliği citiesData üzerinden anlık değişiklik sağlayacaktır\n    mapService.cityNameSubject.subscribe(data=>{\n      this.citiesData=data;\n    });\n   }\n\n  ngOnInit(): void {\n    //Servisimiz ile property mizi dolduruyoruz\n    this.mapService.getCityName();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./city.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "mapService",
                        "type": "MapService"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "mapService",
                        "type": "MapService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row\">\n  <h3>Şehirler</h3>\n  <div class=\"col-md-12\">\n    <ul>\n      <li *ngFor=\"let city of citiesData\">\n        {{city.id}} - {{city.name}}\n      </li>\n    </ul>\n  </div>\n</div>\n"
        },
        {
            "name": "CookieComponent",
            "id": "component-CookieComponent-556603e78c3068e8872379f6ac25d1d2",
            "file": "src/app/storage/cookie/cookie.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-cookie",
            "styleUrls": [
                "./cookie.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./cookie.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cookieValue",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "isCookieExist",
                    "defaultValue": "false",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "name",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "checkCookie",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "clearAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41
                },
                {
                    "name": "clearItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                },
                {
                    "name": "getItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18
                },
                {
                    "name": "setItem",
                    "args": [
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { CookieService } from 'ngx-cookie-service';\n\n@Component({\n  selector: 'app-cookie',\n  templateUrl: './cookie.component.html',\n  styleUrls: ['./cookie.component.scss']\n})\nexport class CookieComponent implements OnInit {\n\nname=\"\";\ncookieValue=\"\";\nisCookieExist:boolean=false; //Key e ait cookie kontrolü\n\n  //Servisimizi inject ettik\n  constructor(private cookieService:CookieService) { }\n\n  ngOnInit(): void {\n  }\n\n  checkCookie(){\n    //Key e ait cookie var mı yok mu _?\n    this.isCookieExist=this.cookieService.check(\"name\");\n  }\n\n  setItem(value){\n    //Cookie servisi de key value şeklinde çalışır\n    this.cookieService.set(\"name\",value);\n  }\n\n  getItem(){\n    //cookie den key e göre data aldık\n    this.cookieValue=this.cookieService.get(\"name\");\n  }\n\n  clearItem(){\n    //Key değerine ait cookie temizlendi\n    this.cookieService.delete(\"name\");\n  }\n\n  clearAll(){\n    //Tüm cookileri siler\n    this.cookieService.deleteAll();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./cookie.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "cookieService",
                        "type": "CookieService"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "cookieService",
                        "type": "CookieService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row\">\n  <div class=\"col-md-5\">\n    <input type=\"text\" [(ngModel)]=\"name\">\n    <button class=\"btn btn-success\" (click)=\"setItem(name);\">Set Cookie</button>\n    <button class=\"btn btn-primary\" (click)=\"getItem();\">Get Cookie</button>\n    <button class=\"btn btn-warning\" (click)=\"clearItem();\">Delete Cookie</button>\n    <button class=\"btn btn-danger\" (click)=\"clearAll();\">Delete All Cookies</button>\n    <button class=\"btn btn-secondary\" (click)=\"checkCookie();\">Check Cookie</button>\n    <p>Name : {{name}}</p>\n    <p>Cookie Value: {{cookieValue}}</p>\n    <p>Cookie Var mı : {{isCookieExist}}</p>\n  </div>\n</div>\n"
        },
        {
            "name": "DataBindingComponent",
            "id": "component-DataBindingComponent-16a064739ee436e6fb5cdea0a6f34c90",
            "file": "src/app/data-binding/data-binding.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-data-binding",
            "styleUrls": [
                "./data-binding.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./data-binding.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "type",
                    "defaultValue": "\"text\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "user",
                    "defaultValue": "{\n    name:\"Eray\",\n    surname:\"Bakır\",\n    picture:\"https://picsum.photos/150/100\",\n    isEditable:false\n  }",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "buttonClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                },
                {
                    "name": "pushEnter",
                    "args": [
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-data-binding',\n  templateUrl: './data-binding.component.html',\n  styleUrls: ['./data-binding.component.scss']\n})\nexport class DataBindingComponent implements OnInit {\n\n  //UI Tarafına göndermek için obje oluşturduk\n  user:any={\n    name:\"Eray\",\n    surname:\"Bakır\",\n    picture:\"https://picsum.photos/150/100\",\n    isEditable:false\n  }\n\n  type:string=\"text\";\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  buttonClick(){\n    alert(\"butona tıklandı\");\n  }\n\n  pushEnter(value){\n    alert(value);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".red{\r\n  color: red;\r\n}\r\n",
                    "styleUrl": "./data-binding.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 18
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row\">\n  <div class=\"col-md-12\">\n    <h2>One Way Binding</h2>\n    <!-- Componentten UI Tarafına geçiş One Way Binding olarak adlandırılır -->\n    <div class=\"row\">\n      <div class=\"col-md-4\">\n        <h3>Interpolation</h3>\n        <p>\n          <!-- Interpolation bir çok özelliği ile Net MVC deki Razor a benzemektedir -->\n          <!-- TS dosyamızdaki objeye burada eriştik.Onu UI tarafında gösterdik -->\n          Ad :{{user.name}} Soyad: {{user.surname}}\n        </p>\n        <div>\n          <img src=\"{{user.picture}}\" alt=\"\">\n        </div>\n      </div>\n      <div class=\"col-md-3\">\n        <h3>Property Binding</h3>\n        <!-- value özniteliğine interpolation kullanmadan değer atadık -->\n        <input [type]=\"type\" [value]=\"user.name\">\n      </div>\n      <div class=\"col-md-3\">\n        <h3>Attribute Binding</h3>\n        <!-- html attributelerine interpolation kullanmadan değer atadık -->\n        <!-- içerisinde one-line-if kullandık -->\n        <input [type]=\"type\" [value]=\"user.name\" [attr.disabled]=\"user.isEditable ? null : 'disabled'\">\n      </div>\n      <div class=\"col-md-2\">\n        <h3>Class Binding</h3>\n        <!-- Red classının elemente eklenme durumuna dinamik karar verdik -->\n        <p [class.red]=\"user.isEditable\">Class Bind Test</p>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col-md-4\">\n        <h3>Style Binding</h3>\n        <!-- Color değerinin elemente eklenme durumuna dinamik karar verdik -->\n        <p [style.color]=\"user.isEditable ? 'green' : 'orange '\">Style Bind Test</p>\n      </div>\n      <div class=\"col-md-4\">\n        <h3>Event Binding</h3>\n        <!-- TS tarafında oluşturduğumuz metotları UI tarafındaki elemenlerimize bağlayabiliriz -->\n        <!-- keyup.enter enter tuşuna basılma durumunu kontrol eder -->\n        <input type=\"text\" (keyup.enter)=\"pushEnter($event.target.value);\">\n        <button (click)=\"buttonClick();\">Alert Çalıştır</button>\n      </div>\n      <div class=\"col-md-4\">\n        <h3>Two Way Binding</h3>\n        <!-- Kullanılabilmesi için ilgili module FormsModule 'ün eklenmiş olması gereklidir' -->\n        <!-- Burada yapılan değişiklikler referans tipin değerinide değiştirir -->\n        <input type=\"text\" [(ngModel)]=\"user.name\">\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "DirectivesComponent",
            "id": "component-DirectivesComponent-36cc6ccbaf7e39df5a10c33f0b11a1c0",
            "file": "src/app/directives/directives/directives.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-directives",
            "styleUrls": [
                "./directives.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./directives.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cities",
                    "defaultValue": "[\n    {id:10,name:\"İstanbul\"},\n    {id:20,name:\"Ankara\"},\n    {id:30,name:\"Eskişehir\"},\n    {id:40,name:\"Sakarya\"}\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "color",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "name",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "switchControlName",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "title",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "changeTitle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-directives',\n  templateUrl: './directives.component.html',\n  styleUrls: ['./directives.component.scss']\n})\nexport class DirectivesComponent implements OnInit {\n\n  constructor() { }\n\n\n  title=false;\n  name=\"\";\n  switchControlName=\"\";\n  color=\"\";\n\n  //For yapısı için oluşturduğumuz Array\n  cities=[\n    {id:10,name:\"İstanbul\"},\n    {id:20,name:\"Ankara\"},\n    {id:30,name:\"Eskişehir\"},\n    {id:40,name:\"Sakarya\"}\n  ];\n\n  ngOnInit(): void {\n  }\n\n\n  changeTitle(){\n    //Title değerini her seferinde değiştiriyoruz bir nevi toggle işlemi yapıyor\n   this.title=!this.title;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./directives.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "o<div class=\"d-flex justify-content-center\">\n  <h2>Directives</h2>\n</div>\n<h3>Structural Directives</h3>\n\n<div class=\"row\">\n  <div class=\"col-md-4\">\n    <h4>*ngIf</h4>\n    <input type=\"text\" [(ngModel)]=\"name\">\n    <!-- ng if boolean expression alır ve duruma göre gösterip gizler -->\n    <p *ngIf=\"title\">Title var..</p>\n    <p *ngIf=\"name==='Eray'\">\n      İsim : Eray\n    </p>\n\n    <!-- Duruma göre çalışacak olan template leride belirledik.Birçok zaman büyük\n    html kodları çalıştırmamız gerekebilir her zaman basit string ler ile çalışmayız -->\n    <div *ngIf=\"title;then titleTemp;else nonTitleTemp;\">\n    </div>\n\n    <ng-template #titleTemp>Title var Temp</ng-template>\n    <ng-template #nonTitleTemp>Title Yok Temp</ng-template>\n\n    <button (click)=\"changeTitle();\">Toggle</button>\n  </div>\n  <div class=\"col-md-4\">\n    <h4>ng switch</h4>\n    <input type=\"text\" [(ngModel)]=\"switchControlName\">\n\n    <ul [ngSwitch]=\"switchControlName\">\n      <li *ngSwitchCase=\"'Eray'\">Eray</li>\n      <li *ngSwitchCase=\"'Berkay'\">Berkay</li>\n      <!-- Eşleşme olmaması halinde çalışacak kısım -->\n      <li *ngSwitchDefault>Default</li>\n    </ul>\n  </div>\n  <div class=\"col-md-4\">\n    <h4>*ng For</h4>\n    <!-- index kullanımı opsiyoneldir -->\n    <ul *ngFor=\"let city of cities;let i=index\">\n      <li>Sehir ID: {{city.id}} Şehir Adı: {{city.name}} Index:{{i}}</li>\n    </ul>\n  </div>\n  <h3>Attribute Directives</h3>\n  <div class=\"col-md-6\">\n    <h4>ng Class</h4>\n    <input type=\"text\" [(ngModel)]=\"color\">\n    <p class=\"font-weight-bold\" [ngClass]=\"{'text-danger': color==='red','bg-primary':color==='blue'}\">Renk</p>\n  </div>\n  <div class=\"col-md-6\">\n    <h4>ng Style</h4>\n    <input type=\"text\" [(ngModel)]=\"color\">\n    <p [ngStyle]=\"{'color': color===''?'orange':color}\">Style Binding</p>\n    <!-- color boş ise turuncu olsun diğer türlü renk değerini versin -->\n  </div>\n  <div class=\"col-md-12\">\n    <h4>Custom Directives</h4>\n    <p appHighlight>Directive Test</p>\n    <!-- Directive e değişken göndermek -->\n    <p appHighlight [myColor]=\"'yellow'\">Custom Directive Test 2</p>\n  </div>\n</div>\n"
        },
        {
            "name": "FormsComponent",
            "id": "component-FormsComponent-5922cdd6f9d1776f67eeef8dc8b05127",
            "file": "src/app/forms/forms/forms.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-forms",
            "styleUrls": [
                "./forms.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./forms.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "registerForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "user",
                    "defaultValue": "{\n    userName:\"eray\",\n    age:0\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "resetForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40
                },
                {
                    "name": "save",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport {FormGroup,FormControl, Validators} from \"@angular/forms\"; //Reactive formları kullanmak için import ettik\nimport { BlacklistValidator } from 'src/lib/custom-validators/blacklist.validator';\nimport { WhiteSpaceValidator } from 'src/lib/custom-validators/no-white-space.validator';\nimport { userNameExistValidator } from 'src/lib/custom-validators/user-name-exist.validator';\nimport { UserService } from 'src/lib/services/user.service';\n\n@Component({\n  selector: 'app-forms',\n  templateUrl: './forms.component.html',\n  styleUrls: ['./forms.component.scss']\n})\nexport class FormsComponent implements OnInit {\n\n\n  //FormGroup Nesnemiz\n  registerForm:FormGroup;\n\n  //Form Post Edildikten sonra Bind edilecek user objemiz\n  user={\n    userName:\"eray\",\n    age:0\n  };\n\n  //DI ile userService i instance ettik.gerekli modulün providers ına eklediğimiz için instance oluşabilecektir.\n  constructor(private userService:UserService) { }\n\n  ngOnInit(): void {\n    //Component yüklenmeden önce çalışması için metodu çalıştırdık\n    this.resetForm();\n  }\n\n  //Submit işlemi neticesinde çalışacak olan metodumuz\n  save(event:any){\n    //Formdan gelen değerler user objesine bind ediliyor\n    this.user=event.value;\n    console.log(this.user);\n  }\n\n  resetForm(){\n    this.registerForm=new FormGroup({\n      //user var ise değeri yok ise empty olarak atadık\n      userName:new FormControl(this.user ? this.user.userName : \"\",{\n        validators:\n        [\n          Validators.required,\n          Validators.minLength(3),\n          BlacklistValidator(\"ğ\"),\n          WhiteSpaceValidator],\n          asyncValidators:[userNameExistValidator(this.userService)],\n          updateOn:\"blur\"\n      }),\n      //İlk parametre input değeridir,ikinci parametre ise validasyon kurallarını barındırır\n      //custom oluşturduğumuz BlacklistValidator umuzu ve WhiteSpace validatorumuzu tanımladık\n      //updateOn parametresi inputtan çıkana kadar validasyon uyarılarını bize vermeyecektir\n      //async validators parametresi geriye observable dönen bir validator alır.biz buradaki örnekte service istek attık.Ve parametre olarak servisimizi tanımladık\n      age:new FormControl(this.user.age ? this.user.age : 0)\n    });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./forms.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserService"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row\">\n  <h2>Reactive Forms - Register</h2>\n  <div class=\"col-md-12\">\n\n    <!-- Ts dosyamızda ki formGroup nesnemizi verdik -->\n    <!-- Submit işlemi neticesinde çalışacak metodu ve grubumuzu verdik -->\n<form [formGroup]=\"registerForm\" (ngSubmit)=\"save(registerForm)\">\n  <!--formGrup infomda property e ait hata var ise hata mesajını gösterelim.Dirty özelliği inputa giriş yapılıp yapılmadığını kontrol eder  -->\n  <p *ngIf=\"registerForm?.controls?.userName?.errors?.required && registerForm?.controls?.userName?.dirty\" style=\"color:red;\">\n    Bu alan zorunludur\n  </p>\n  <!-- Custom Validatorumuzu kullandık.Blacklist bizim oluşturduğumuz bir property idi -->\n  <p style=\"color:red;\" *ngIf=\"registerForm?.controls?.userName?.errors?.blacklist && registerForm?.controls?.userName?.dirty\">\n    ğ Harfini kullanamazsınız\n  </p>\n  <!-- Custom Validatorumuzu kullandık.WhiteSpace bizim oluşturduğumuz bir property idi -->\n  <p style=\"color:red;\" *ngIf=\"registerForm?.controls?.userName?.errors?.whitespace && registerForm?.controls?.userName?.dirty\">\n    Boşluk kullanamazsınız\n  </p>\n  <!-- Custom Async Validatorumuzu kullandık.userNameExist bizim oluşturduğumuz bir property idi -->\n  <p style=\"color:red;\" *ngIf=\"registerForm?.controls?.userName?.errors?.userNameExist && registerForm?.controls?.userName?.dirty\">\n    Kullanıcı adı zaten sistemde kayıtlıdır\n  </p>\n  <label for=\"\">\n    User Name:\n    <input type=\"text\" formControlName=\"userName\">\n  </label>\n  <label for=\"\">\n    Age:\n    <input type=\"number\" formControlName=\"age\">\n  </label>\n  <!-- formumuzun valid olma durumuna göre buttonu disabled yaptık -->\n  <button [disabled]=\"!registerForm?.valid\" type=\"submit\" class=\"btn btn-success\">Kayıt Ol</button>\n</form>\n\n  </div>\n</div>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-246e2a69dc126a3bd76c6328dd3b93e2",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-2e10e988b2099090b99c43c3cd01afe1",
            "file": "src/app/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [
                "./home.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 13
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor(){}\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./home.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>Title Translate : {{\"app.title\" | translate}}</p>\n"
        },
        {
            "name": "LocalStorageComponent",
            "id": "component-LocalStorageComponent-7a3cfba53fce61fd52eff64a6ae6a0eb",
            "file": "src/app/storage/local-storage/local-storage.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-local-storage",
            "styleUrls": [
                "./local-storage.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./local-storage.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "localStorageObjectValue",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "localStorageValue",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "name",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "objName",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "objSurname",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "clearAll",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41
                },
                {
                    "name": "clearItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                },
                {
                    "name": "getItem",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31
                },
                {
                    "name": "getObject",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "setItem",
                    "args": [
                        {
                            "name": "value",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setObject",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-local-storage',\n  templateUrl: './local-storage.component.html',\n  styleUrls: ['./local-storage.component.scss']\n})\nexport class LocalStorageComponent implements OnInit {\n\n  constructor() { }\n\n  name: string = \"\"; //Two way binding yapılacak değişken oluşturuldu\n  localStorageValue = \"\"; //Local Storage den aldığımız datayı atayacağımız değişkeni oluşturduk\n  localStorageObjectValue; //Local Storage den gelen objemizi kayıt edeceğimiz property\n\n\n  //localStorage e obje kaydetme\n  objName = \"\";\n  objSurname = \"\";\n\n\n\n  ngOnInit(): void {\n  }\n\n  setItem(value) {\n    //Local Storage e data eklerken key value ikilisi şeklinde kaydediriz\n    localStorage.setItem(\"name\", value);\n  }\n\n  getItem() {\n    //Local Storageden data alırken key değeri ile erişim sağlarız\n    this.localStorageValue = localStorage.getItem(\"name\");\n  }\n\n  clearItem() {\n    //Belli bir key e ait datayı sileriz\n    localStorage.removeItem(\"name\");\n  }\n\n  clearAll() {\n    //Bütün local storage yi temizleriz\n    localStorage.clear();\n  }\n\n  //Object Set\n  setObject() {\n    //Propertylerimiz ile objemizi oluşturduk\n    const obj = {\n      name: this.objName,\n      surname: this.objSurname\n    };\n\n    localStorage.setItem(\"object\", JSON.stringify(obj));\n\n  }\n\n  //Object Get\n  getObject() {\n    //object key bilgisi ile local storage kayıt ettiğimiz objeyi almış bulunmaktayız\n    this.localStorageObjectValue=localStorage.getItem(\"object\");\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./local-storage.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row mt-2\">\n  <div class=\"col-md-12\">\n    <input type=\"text\" [(ngModel)]=\"name\">\n  </div>\n  <div class=\"col-md-12 mt-5\">\n    <!-- name property sini TS dosyamızdan okuyacak -->\n    <button class=\"btn btn-success\" (click)=\"setItem(name);\">Set Item</button>\n    <button class=\"btn btn-primary\" (click)=\"getItem();\">Get Item</button>\n    <button class=\"btn btn-warning\" (click)=\"clearItem();\">Clear Item</button>\n    <button class=\"btn btn-danger\" (click)=\"clearAll();\">Clear All</button>\n  </div>\n\n  <p>ng model : {{name}}</p>\n  <p>local storage value : {{localStorageValue}}</p>\n\n  <div class=\"col-md-12\">\n    <input type=\"text\" [(ngModel)]=\"objName\">\n    <input type=\"text\" [(ngModel)]=\"objSurname\">\n    <button (click)=\"setObject();\">Set Object</button>\n    <button (click)=\"getObject()\">Get Object</button>\n    <p>{{localStorageObjectValue}}</p>\n  </div>\n  <div class=\"col-md-12\">\n    <button routerLink=\"/storage/cookie\">Go To Cookie Page</button>\n  </div>\n</div>\n"
        },
        {
            "name": "MapComponent",
            "id": "component-MapComponent-d845906384d710700fe207df4a8e850b",
            "file": "src/app/map/map/map.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-map",
            "styleUrls": [
                "./map.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./map.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                },
                {
                    "name": "save",
                    "args": [
                        {
                            "name": "form",
                            "type": "NgForm"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "NgForm",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { MapService } from 'src/lib/services/map.service';\n\n@Component({\n  selector: 'app-map',\n  templateUrl: './map.component.html',\n  styleUrls: ['./map.component.scss']\n})\nexport class MapComponent implements OnInit {\n\n  constructor(private mapService:MapService) { }\n\n  ngOnInit(): void {\n  }\n\n  save(form:NgForm){\n    //Form inputlarımızın value sini servisimize gönderiyoruz\n    //Bu işlemin akabinde sayfa yenilenmeden yeni datalarımızı göremeyeceğiz.\n    this.mapService.save(form.value);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./map.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "mapService",
                        "type": "MapService"
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "mapService",
                        "type": "MapService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row\">\n  <div class=\"col-md-12\">\n    <!-- form inputlarını paketleyip save metodumuza gönderiyoruz -->\n    <form class=\"form-group\" #cityForm=\"ngForm\" (ngSubmit)=\"save(cityForm);\">\n\n      <div class=\"row\">\n        <div class=\"col-md-12 form-control\">\n          <label for=\"id\">Id</label>\n          <input type=\"number\" name=\"id\" ngModel>\n        </div>\n\n        <div class=\"col-md-12 form-control\">\n          <label for=\"name\">Name</label>\n          <input type=\"text\" name=\"name\" ngModel>\n        </div>\n        <div class=\"col-md-12 form-control\">\n          <label for=\"region\">Region</label>\n          <input type=\"text\" name=\"region\" ngModel>\n        </div>\n        <div class=\"col-md-12 form-control\">\n          <label for=\"plaka\">Plaka</label>\n          <input type=\"number\" name=\"plaka\" ngModel>\n        </div>\n      </div>\n      <button type=\"submit\">Kaydet</button>\n    </form>\n  </div>\n  <div class=\"col-md-4\">\n    <app-city></app-city>\n  </div>\n  <div class=\"col-md-4\">\n    <app-region></app-region>\n  </div>\n  <div class=\"col-md-4\">\n    <app-plaka></app-plaka>\n  </div>\n</div>\n"
        },
        {
            "name": "NavbarComponent",
            "id": "component-NavbarComponent-43293aa4b7cba4eea7e07573776d947d",
            "file": "src/app/navbar/navbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-navbar",
            "styleUrls": [
                "./navbar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./navbar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "lang",
                    "line": 15,
                    "type": "any"
                }
            ],
            "outputsClass": [
                {
                    "name": "langeChange",
                    "defaultValue": "new EventEmitter()",
                    "line": 16,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                },
                {
                    "name": "toggleLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { UserService } from 'src/lib/services/user.service';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.scss']\n})\nexport class NavbarComponent implements OnInit {\n\n  //Login olayını gerçekleştirecek servisimizi DI ile ekledik.\n  //AppModule de ekli olduğu için istediğimiz yerde kullanabiliyoruz\n  constructor(private userService: UserService) { }\n\n  @Input() lang:any;\n  @Output() langeChange:EventEmitter<any>=new EventEmitter();\n\n\n  ngOnInit(): void {\n  }\n\n  toggleLogin() {\n    //Servis tarafında login ve logout işlemi yapan metodumuz\n    this.userService.login();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\r\n",
                    "styleUrl": "./navbar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "userService",
                        "type": "UserService"
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "userService",
                        "type": "UserService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<!--navbar.component.html-->\n\n<igx-navbar title=\"Angular Tutorial\" actionButtonIcon=\"home\" [isActionButtonVisible]=\"true\">\n\n\n  <!-- Select Box For Language Change -->\n  <!-- langeChange ile (Output özelliği) app-componente datayı gönderiyoruz -->\n  <igx-select [value]=\"lang\" (onSelection)=\"langeChange.emit($event.newSelection.value)\">\n    <igx-select-item value=\"tr\">Türkçe</igx-select-item>\n    <igx-select-item value=\"en\">English</igx-select-item>\n  </igx-select>\n\n\n  <!-- Navbar iconları bu şekilde tanımlanır -->\n  <igx-icon>search</igx-icon>\n  <!-- user simgesine tıklandığı vakit login ya da logout işlemi yapacaktır -->\n  <igx-icon (click)=\"toggleLogin();\">account_circle</igx-icon>\n  <igx-icon>more_vert</igx-icon>\n</igx-navbar>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-cca1a8911321fa17756ce90c90de65cc",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 66,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  @Input()\n  user: unknown = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nh2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\np {\n  margin: 1em 0;\n}\n\na {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nli {\n  margin-bottom: 8px;\n}\n\n.tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\n.tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "Parent1Component",
            "id": "component-Parent1Component-a66db60fc6247b8e85042f5b1d4dd717",
            "file": "src/app/parents/parent1/parent1.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-parent1",
            "styleUrls": [
                "./parent1.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./parent1.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "child1",
                    "type": "Child1Component",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "Child1Component"
                        }
                    ]
                },
                {
                    "name": "name",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "postData",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "successStatus",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "childTrigger",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24
                },
                {
                    "name": "postDataMethod",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                },
                {
                    "name": "resetFormAction",
                    "args": [
                        {
                            "name": "event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewChild } from '@angular/core';\nimport { Child1Component } from 'src/lib/chilld-components/child1/child1.component';\n\n@Component({\n  selector: 'app-parent1',\n  templateUrl: './parent1.component.html',\n  styleUrls: ['./parent1.component.scss']\n})\nexport class Parent1Component implements OnInit {\n\n  constructor() { }\n\n  //child component ile iletişime geçtik ve ona ait olan yapıları kullanabilir hale geldik\n  @ViewChild(Child1Component) child1: Child1Component;\n\n  //Child componentimize gidecek olan objenin değişkenleri\n  name = \"\";\n  successStatus: boolean;\n\n  //Child componente gidecek olan obje\n  postData;\n\n\n  ngOnInit(): void {\n  }\n\n  postDataMethod() {\n    this.postData = {\n      name: this.name,\n      status: this.successStatus\n    }\n  }\n\n  //Child tarafında output nesnemiz tetiklendi ve bu metodumuzun çalışmasını sağladı\n  resetFormAction(event) {\n    alert(event);\n  }\n\n\n  //Child component e ait metodu çalıştırdık\n  childTrigger() {\n    this.child1.alertChild();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./parent1.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 9
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>parent1 works!</p>\n\n<div class=\"row\">\n  <div class=\"col-md-4\">\n    İsim: <input type=\"text\" [(ngModel)]=\"name\">\n  </div>\n  <div class=\"col-md-4\">\n    <select [(ngModel)]=\"successStatus\">\n      <option value=\"true\">Başarılı</option>\n      <option value=\"false\">Başarısız</option>\n    </select>\n  </div>\n  <div class=\"col-md-2\">\n    <button class=\"btn btn-sm btn-primary\" (click)=\"postDataMethod();\">Çalıştır</button>\n  </div>\n</div>\n<br>\n\n<div *ngIf=\"postData!=null\" class=\"row\">\n  <div class=\"col-md-12\">\n    <h2>Child Component</h2>\n    <!-- child component datayı hangi değişken ismi ile bekliyorsa o şekilde name property mizi gönderdik  -->\n    <!-- Ts dosyamızda oluşturduğumuz objeyi child componentimize gönderiyoruz -->\n    <!-- resetForm child tarafında bulunan bir output yapısıdır -->\n    <app-child1 [data]=\"postData\" (resetForm)=\"resetFormAction($event);\"></app-child1>\n  </div>\n</div>\n\n<button class=\"btn btn-success\" (click)=\"childTrigger();\">Child Alert Tetikle</button>\n\n\n"
        },
        {
            "name": "Parent2Component",
            "id": "component-Parent2Component-0b9334793be7cd28d2413d56c58130bc",
            "file": "src/app/parents/parent2/parent2.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-parent2",
            "styleUrls": [
                "./parent2.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./parent2.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-parent2',\n  templateUrl: './parent2.component.html',\n  styleUrls: ['./parent2.component.scss']\n})\nexport class Parent2Component implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./parent2.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>parent2 works!</p>\n"
        },
        {
            "name": "PipesComponent",
            "id": "component-PipesComponent-174721e077870e23c15b3e0d4458de8b",
            "file": "src/app/pipes/pipes/pipes.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-pipes",
            "styleUrls": [
                "./pipes.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./pipes.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cashValue",
                    "defaultValue": "120.65",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "cities",
                    "defaultValue": "[\n    \"İstanbul\",\"İzmir\",\"Ankara\",\"Edirne\",\"Antalya\"\n  ]",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "cityName",
                    "defaultValue": "\"İstanbul\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "myObject",
                    "defaultValue": "{\n    foo: \"bar\",\n    baz: \"dux\",\n    nested: { xyz: 3, number: [1, 2, 3, 4] }\n  }",
                    "type": "Object",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "percentVal",
                    "defaultValue": "333.3",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "title",
                    "defaultValue": "\"AnKaRa TürKiyenin BaşKentidir\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "today",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "TurkishUpperCase",
                    "defaultValue": "\"\"",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-pipes',\n  templateUrl: './pipes.component.html',\n  styleUrls: ['./pipes.component.scss']\n})\nexport class PipesComponent implements OnInit {\n\n  constructor() { }\n\n  //Pipes test text\n  title = \"AnKaRa TürKiyenin BaşKentidir\";\n  TurkishUpperCase = \"\";\n  today;\n  cashValue = 120.65;\n  percentVal=333.3;\n  cityName=\"İstanbul\";\n  //Custom Pipe için bir array tanılıyoruz\n  cities:string[]=[\n    \"İstanbul\",\"İzmir\",\"Ankara\",\"Edirne\",\"Antalya\"\n  ];\n\n  //Json Pipe Object Value\n  myObject: Object = {\n    foo: \"bar\",\n    baz: \"dux\",\n    nested: { xyz: 3, number: [1, 2, 3, 4] }\n  };\n\n  ngOnInit(): void {\n    this.today = new Date().toString();\n    this.TurkishUpperCase = (this.title as any).toLocaleUpperCase(\"tr-TR\");\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./pipes.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row\">\n  <div class=\"col-md-3\">\n    <h3>Lower Case</h3>\n    <p>Normal: {{title}}</p>\n    <p>Lower Case: {{title | lowercase}}</p>\n  </div>\n  <div class=\"col-md-3\">\n    <h3>Title Case</h3>\n    <p>Normal: {{title}}</p>\n    <p>Title Case: {{title | titlecase}}</p>\n  </div>\n  <div class=\"col-md-3\">\n    <h3>Upper Case</h3>\n    <p>Normal: {{title}}</p>\n    <p>Upper Case: {{title | uppercase}}</p>\n    <p>Turkish: {{TurkishUpperCase}}</p>\n  </div>\n  <div class=\"col-md-4\">\n    <h3>Date</h3>\n    <p>Normal: {{today}}</p>\n    <!-- localization işlemi de uygunlandı -->\n    <p>Date Case: {{today | date:\"dd/MMMM/yyyy\":\"\":\"tr-TR\"}}</p>\n  </div>\n  <div class=\"col-md-4\">\n    <h3>Currency Pipe</h3>\n    <p>Normal: {{cashValue}}</p>\n    <!-- gerekli para birimi şeklinde gösterilir -->\n    <p>Curreny Pipe: {{cashValue | currency : \"EUR\"}}</p>\n  </div>\n  <div class=\"col-md-4\">\n    <h3>JSON Pipe</h3>\n    <p>Without Pipe: {{myObject}}</p>\n    <p>With Pipe: {{myObject | json}}</p>\n  </div>\n  <div class=\"col-md-4\">\n    <h3>Percent Pipe</h3>\n    <p>Percent: {{percentVal | percent}}</p>\n  </div>\n  <div class=\"col-md-4\">\n    <h3>Slice Pipe</h3>\n    <p>Normal: {{cityName}}</p>\n    <!-- Kaç karakter gösterilecek onu belirliyoruz.Daha farklı kullanımları mevcut -->\n    <p>Slice Pipe : {{cityName | slice:0:3}}</p>\n  </div>\n  <div class=\"col-md-6\">\n    <h3>Custom Pipes</h3>\n    <!--tlConvert custom pipe mızın ismidir -->\n    <p>TRY: {{cashValue | tlConvert}}</p>\n    <br>\n    <b>Cities</b>\n    <ul>\n      <!-- örneğin içerisinde a harfi olan şehirler sadece yazdırılsın -->\n      <!-- bu işlem için pipe kullanacağız -->\n      <li *ngFor=\"let city of cities | filtering :'a'\">{{city}}</li>\n    </ul>\n  </div>\n</div>\n"
        },
        {
            "name": "PlakaComponent",
            "id": "component-PlakaComponent-320c7544abca7036bb41880e8011e570",
            "file": "src/app/map/plaka/plaka.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-plaka",
            "styleUrls": [
                "./plaka.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./plaka.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "plakaDatas",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { MapService } from 'src/lib/services/map.service';\n\n@Component({\n  selector: 'app-plaka',\n  templateUrl: './plaka.component.html',\n  styleUrls: ['./plaka.component.scss']\n})\nexport class PlakaComponent implements OnInit {\n\n  plakaDatas;\n\n  constructor(private mapService:MapService) {\n     //cityPlakaSubject in her değişikliği citiesData üzerinden anlık değişiklik sağlayacaktır\n     mapService.cityPlakaSubject.subscribe(data=>{\n      this.plakaDatas=data;\n    });\n   }\n\n  ngOnInit(): void {\n    this.mapService.getPlakas();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./plaka.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "mapService",
                        "type": "MapService"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "mapService",
                        "type": "MapService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row\">\n  <h3>Plakalar</h3>\n  <div class=\"col-md-12\">\n    <ul>\n      <li *ngFor=\"let city of plakaDatas\">\n        {{city.id}} - {{city.plaka}} - {{city.name}}\n      </li>\n    </ul>\n  </div>\n</div>\n"
        },
        {
            "name": "RegionComponent",
            "id": "component-RegionComponent-3ea2ece48f6d04e75b5c15810a9bbd1b",
            "file": "src/app/map/region/region.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-region",
            "styleUrls": [
                "./region.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./region.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "regionDatas",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { MapService } from 'src/lib/services/map.service';\n\n@Component({\n  selector: 'app-region',\n  templateUrl: './region.component.html',\n  styleUrls: ['./region.component.scss']\n})\nexport class RegionComponent implements OnInit {\n\n  regionDatas;\n\n  constructor(private mapService:MapService) {\n     //cityRegionSubject in her değişikliği citiesData üzerinden anlık değişiklik sağlayacaktır\n     mapService.cityRegionSubject.subscribe(data=>{\n      this.regionDatas=data;\n    });\n   }\n\n  ngOnInit(): void {\n    this.mapService.getRegions();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./region.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "mapService",
                        "type": "MapService"
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "mapService",
                        "type": "MapService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"row\">\n  <h3>Bölgeler</h3>\n  <div class=\"col-md-12\">\n    <ul>\n      <li *ngFor=\"let city of regionDatas\">\n        {{city.id}} - {{city.name}} - {{city.region}}\n      </li>\n    </ul>\n  </div>\n</div>\n"
        },
        {
            "name": "RoleComponent",
            "id": "component-RoleComponent-fcfb35dd285dddb6e60018e63a23bfc0",
            "file": "src/app/role/role.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-role",
            "styleUrls": [
                "./role.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./role.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "rolesData",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "subs1",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "subs2",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "addNewRole",
                    "args": [
                        {
                            "name": "roleForm",
                            "type": "NgForm"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "roleForm",
                            "type": "NgForm",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteRole",
                    "args": [
                        {
                            "name": "roleForm",
                            "type": "NgForm"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "jsdoctags": [
                        {
                            "name": "roleForm",
                            "type": "NgForm",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getRoles",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "updateRole",
                    "args": [
                        {
                            "name": "roleForm",
                            "type": "NgForm"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "jsdoctags": [
                        {
                            "name": "roleForm",
                            "type": "NgForm",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { RoleService } from 'src/lib/services/role.service';\n\n@Component({\n  selector: 'app-role',\n  templateUrl: './role.component.html',\n  styleUrls: ['./role.component.scss']\n})\nexport class RoleComponent implements OnInit, OnDestroy {\n\n  rolesData;\n\n  //Unsubscribe kullanımı için oluşturduğumuz değişkenler\n  subs1: Subscription;\n  subs2: Subscription;\n\n  constructor(private roleService: RoleService) { }\n\n  //Component in yaşam ömrü bittiği zaman yapılacak işlemler\n  ngOnDestroy(): void {\n    //subscribe işlemleri memory leak oluşturur.\n    //Bundan dolayı component ile işimiz bittiği zaman bu işlemi yapmamız performans açısından önemlidir.\n    this.subs1.unsubscribe();\n    this.subs2.unsubscribe();\n  }\n\n  //Component başlatıldığı an yapılacak işlemler\n  ngOnInit(): void {\n    this.getRoles();\n  }\n\n  getRoles() {\n    //Servis tarafından observable döndüğü için subscribe olmamız gerekiyor\n    this.subs1 = this.roleService.getAllRoles().subscribe(data => {\n      this.rolesData = data;\n      console.log(\"data\" + data);\n    });\n  }\n\n  //Post\n  addNewRole(roleForm: NgForm) {\n    //Formdan gelen datayı servise veriyoruz akabinde getRoles i tekrar çalıştırarak datanın\n    //UI tarafında tekrar görünmesini sağlıyorum\n    this.subs2 = this.roleService.addRole(roleForm.value).subscribe(data => {\n      this.getRoles();\n      //Deneme amaçlı bir servis kullandığımız için alert ile göstereceğiz\n      alert(\"Başarıyla eklendi: \" + data.title);\n    }, error => {\n      alert(\"Problem oldu\");\n    });\n\n\n  }\n\n  //Put\n  updateRole(roleForm: NgForm) {\n    //Formdan gelen datayı servise veriyoruz akabinde getRoles i tekrar çalıştırarak datanın\n    //UI tarafında tekrar görünmesini sağlıyorum\n    this.roleService.updateRole(roleForm.value).subscribe(data => {\n      this.getRoles();\n      //Deneme amaçlı bir servis kullandığımız için alert ile göstereceğiz\n      alert(\"Başarıyla güncellendi: \" + data.title);\n    }, error => {\n      alert(\"Problem oldu\");\n    });\n  }\n\n  //Delete\n  deleteRole(roleForm: NgForm) {\n    //Formdan gelen datanın id bilgisini servise veriyoruz akabinde getRoles i tekrar çalıştırarak\n    //UI tarafına refresh atmış oluyoruz\n    this.roleService.deleteRole(roleForm.value.id).subscribe(data => {\n      this.getRoles();\n      //Deneme amaçlı bir servis kullandığımız için alert ile göstereceğiz\n      alert(\"Başarıyla Silindi: \" + data.title);\n    }, error => {\n      alert(\"Problem oldu\");\n    });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./role.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "roleService",
                        "type": "RoleService"
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "roleService",
                        "type": "RoleService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"row\">\n  <div class=\"offset-md-3 col-md-5\">\n    <form #roleForm=\"ngForm\" (ngSubmit)=\"addNewRole(roleForm);\">\n      <label for=\"id\">id: </label>\n      <input type=\"text\" name=\"id\" ngModel>\n      <label for=\"title\">Title: </label>\n      <input type=\"text\" name=\"title\" ngModel>\n      <button type=\"submit\">Kaydet</button>\n      <!-- Tek submit buttonu olabileceği için click bind işlemi yaptık -->\n      <button (click)=\"updateRole(roleForm);\">Düzenle</button>\n      <button (click)=\"deleteRole(roleForm);\">Sil</button>\n    </form>\n  </div>\n</div>\n\n<ul>\n  <li *ngFor=\"let role of rolesData\">\n    title: {{role.title}}\n  </li>\n</ul>\n"
        },
        {
            "name": "SidebarComponent",
            "id": "component-SidebarComponent-6a913a1715984085104b1613c229e2c4",
            "file": "src/app/sidebar/sidebar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sidebar",
            "styleUrls": [
                "./sidebar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sidebar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-sidebar',\n  templateUrl: './sidebar.component.html',\n  styleUrls: ['./sidebar.component.scss']\n})\nexport class SidebarComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./sidebar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"content-wrap\" igxLayout>\n  <igx-nav-drawer id=\"navigation\" #drawer [isOpen]=\"true\" [pin]=\"true\" [pinThreshold]=\"0\">\n    <ng-template igxDrawer>\n      <nav>\n        <span igxDrawerItem [isHeader]=\"true\">Sidebar List</span>\n           <!--routerLink href yerine kullanılıyor -->\n        <span routerLink=\"home\"  igxDrawerItem  igxRipple>\n          <span >Home</span>\n        </span>\n        <span routerLink=\"role\"  igxDrawerItem  igxRipple>\n          <span >Role</span>\n        </span>\n        <span routerLink=\"user\" igxDrawerItem  igxRipple>\n          <span >User</span>\n        </span>\n        <span routerLink=\"mydataurl\" igxDrawerItem  igxRipple>\n          <span >Data Binding</span>\n        </span>\n        <span routerLink=\"storage\" igxDrawerItem  igxRipple>\n          <span >Storage</span>\n        </span>\n        <span routerLink=\"directives\" igxDrawerItem  igxRipple>\n          <span >Directives</span>\n        </span>\n        <span routerLink=\"pipes\" igxDrawerItem  igxRipple>\n          <span >Pipes</span>\n        </span>\n        <span routerLink=\"parents\" igxDrawerItem  igxRipple>\n          <span >Parents</span>\n        </span>\n        <span routerLink=\"forms\" igxDrawerItem  igxRipple>\n          <span >Forms</span>\n        </span>\n        <span routerLink=\"maps\" igxDrawerItem  igxRipple>\n          <span >Map</span>\n        </span>\n      </nav>\n    </ng-template>\n  </igx-nav-drawer>\n</div>\n"
        },
        {
            "name": "UserComponent",
            "id": "component-UserComponent-f12647dbdb1b844bab4edfc8b51b3f69",
            "file": "src/app/user/user/user.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user",
            "styleUrls": [
                "./user.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-user',\n  templateUrl: './user.component.html',\n  styleUrls: ['./user.component.scss']\n})\nexport class UserComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./user.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>user works!</p>\n\n\n<router-outlet></router-outlet>\n<!--User a ait child route yönlendirmeleri için kullandık-->\n\n"
        },
        {
            "name": "UserDetailComponent",
            "id": "component-UserDetailComponent-8aaf3171efb938eb6150b6ea51824f75",
            "file": "src/app/user/user/user-detail/user-detail.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-detail",
            "styleUrls": [
                "./user-detail.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-detail.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-user-detail',\n  templateUrl: './user-detail.component.html',\n  styleUrls: ['./user-detail.component.scss']\n})\nexport class UserDetailComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./user-detail.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>user-detail works!</p>\n"
        },
        {
            "name": "UserListComponent",
            "id": "component-UserListComponent-5d13d076d6a5d0fded98d3b92d21b904",
            "file": "src/app/user/user-list/user-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-list",
            "styleUrls": [
                "./user-list.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-list.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-user-list',\n  templateUrl: './user-list.component.html',\n  styleUrls: ['./user-list.component.scss']\n})\nexport class UserListComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./user-list.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>user-list works!</p>\n"
        },
        {
            "name": "UserRoleComponent",
            "id": "component-UserRoleComponent-3b5c91a413b6b4aeea951461ed86b928",
            "file": "src/app/user/user/user-role/user-role.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-user-role",
            "styleUrls": [
                "./user-role.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./user-role.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-user-role',\n  templateUrl: './user-role.component.html',\n  styleUrls: ['./user-role.component.scss']\n})\nexport class UserRoleComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./user-role.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>user-role works!</p>\n"
        }
    ],
    "modules": [
        {
            "name": "AngularFormsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "UserService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FormsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthInterceptor"
                        },
                        {
                            "name": "UserService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "NavbarComponent"
                        },
                        {
                            "name": "SidebarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ChildModuleModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "Child1Component"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "Child1Component"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DataBindingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DataBindingComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "DirectivesModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "DirectivesComponent"
                        },
                        {
                            "name": "HighlightDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "HomeModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "HomeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "MapModule",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "MapService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CityComponent"
                        },
                        {
                            "name": "MapComponent"
                        },
                        {
                            "name": "PlakaComponent"
                        },
                        {
                            "name": "RegionComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "ParentsModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "Parent1Component"
                        },
                        {
                            "name": "Parent2Component"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "ChildModuleModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "PipesModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FilteringPipe"
                        },
                        {
                            "name": "PipesComponent"
                        },
                        {
                            "name": "TlConvertPipe"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "RoleModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "RoleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "StorageModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CookieComponent"
                        },
                        {
                            "name": "LocalStorageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "UserModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "UserComponent"
                        },
                        {
                            "name": "UserDetailComponent"
                        },
                        {
                            "name": "UserListComponent"
                        },
                        {
                            "name": "UserRoleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "BlacklistValidator",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/lib/custom-validators/blacklist.validator.ts",
                "type": "",
                "defaultValue": "(letter:string)=>{\r\n  return (control:FormControl)=>{\r\n    return control.value.toString().indexOf(letter)>-1 ? {blacklist:true}:null;\r\n  }\r\n}"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  api:{\n    nestjs:{\n      role:\"https://jsonplaceholder.typicode.com/posts\"\n    }\n  }\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  api:{\n    nestjs:{\n      role:\"https://jsonplaceholder.typicode.com/posts\"\n    }\n  }\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
            },
            {
                "name": "userNameExistValidator",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/lib/custom-validators/user-name-exist.validator.ts",
                "type": "",
                "defaultValue": "(userService: any, time: number = 500) => {\r\n  return (input: FormControl) => {\r\n    return timer(time).pipe(\r\n      switchMap(() => userService.isExistName(input.value)),\r\n      map(response => {\r\n        return !response ? null : { userNameExist: true }\r\n      })\r\n    );\r\n  };\r\n}"
            }
        ],
        "functions": [
            {
                "name": "HttpLoaderFactory",
                "file": "src/app/app.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "http"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "http",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "HttpLoaderFactory",
                "ctype": "miscellaneous",
                "subtype": "function",
                "file": "src/app/home/home.module.ts",
                "description": "",
                "args": [
                    {
                        "name": "http"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "http",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "WhiteSpaceValidator",
                "file": "src/lib/custom-validators/no-white-space.validator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "control"
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "control",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/lib/custom-validators/blacklist.validator.ts": [
                {
                    "name": "BlacklistValidator",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/lib/custom-validators/blacklist.validator.ts",
                    "type": "",
                    "defaultValue": "(letter:string)=>{\r\n  return (control:FormControl)=>{\r\n    return control.value.toString().indexOf(letter)>-1 ? {blacklist:true}:null;\r\n  }\r\n}"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  api:{\n    nestjs:{\n      role:\"https://jsonplaceholder.typicode.com/posts\"\n    }\n  }\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  api:{\n    nestjs:{\n      role:\"https://jsonplaceholder.typicode.com/posts\"\n    }\n  }\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  component: Button,\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  component: Header,\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  component: Page,\n  props: args,\n})"
                }
            ],
            "src/lib/custom-validators/user-name-exist.validator.ts": [
                {
                    "name": "userNameExistValidator",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/lib/custom-validators/user-name-exist.validator.ts",
                    "type": "",
                    "defaultValue": "(userService: any, time: number = 500) => {\r\n  return (input: FormControl) => {\r\n    return timer(time).pipe(\r\n      switchMap(() => userService.isExistName(input.value)),\r\n      map(response => {\r\n        return !response ? null : { userNameExist: true }\r\n      })\r\n    );\r\n  };\r\n}"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/app.module.ts": [
                {
                    "name": "HttpLoaderFactory",
                    "file": "src/app/app.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "http"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "http",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/home/home.module.ts": [
                {
                    "name": "HttpLoaderFactory",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "file": "src/app/home/home.module.ts",
                    "description": "",
                    "args": [
                        {
                            "name": "http"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "http",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/lib/custom-validators/no-white-space.validator.ts": [
                {
                    "name": "WhiteSpaceValidator",
                    "file": "src/lib/custom-validators/no-white-space.validator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "control"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "control",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "home",
                        "loadChildren": "./home/home.module#HomeModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/home/home.module.ts",
                                        "module": "HomeModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "HomeComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "HomeModule"
                            }
                        ]
                    },
                    {
                        "path": "role",
                        "loadChildren": "./role/role.module#RoleModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/role/role.module.ts",
                                        "module": "RoleModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "RoleComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "RoleModule"
                            }
                        ]
                    },
                    {
                        "path": "user",
                        "loadChildren": "./user/user.module#UserModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/user/user.module.ts",
                                        "module": "UserModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "UserListComponent"
                                            },
                                            {
                                                "path": ":id",
                                                "component": "UserComponent",
                                                "children": [
                                                    {
                                                        "path": "details",
                                                        "component": "UserDetailComponent"
                                                    },
                                                    {
                                                        "path": "role",
                                                        "component": "UserRoleComponent"
                                                    },
                                                    {
                                                        "path": "",
                                                        "redirectTo": "details",
                                                        "pathMatch": "full"
                                                    }
                                                ],
                                                "canActivateChild": [
                                                    "ChildGuardGuard"
                                                ]
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "UserModule"
                            }
                        ]
                    },
                    {
                        "path": "mydataurl",
                        "loadChildren": "./data-binding/data-binding.module#DataBindingModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/data-binding/data-binding.module.ts",
                                        "module": "DataBindingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "DataBindingComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "DataBindingModule"
                            }
                        ]
                    },
                    {
                        "path": "storage",
                        "loadChildren": "./storage/storage.module#StorageModule",
                        "canActivate": [
                            "AuthGuard"
                        ],
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/storage/storage.module.ts",
                                        "module": "StorageModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "children": [
                                                    {
                                                        "path": "cookie",
                                                        "component": "CookieComponent"
                                                    },
                                                    {
                                                        "path": "local-storage",
                                                        "component": "LocalStorageComponent"
                                                    },
                                                    {
                                                        "path": "",
                                                        "redirectTo": "local-storage",
                                                        "pathMatch": "full"
                                                    }
                                                ]
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "StorageModule"
                            }
                        ]
                    },
                    {
                        "path": "directives",
                        "loadChildren": "./directives/directives.module#DirectivesModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/directives/directives.module.ts",
                                        "module": "DirectivesModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "DirectivesComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "DirectivesModule"
                            }
                        ]
                    },
                    {
                        "path": "pipes",
                        "loadChildren": "./pipes/pipes.module#PipesModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/pipes/pipes.module.ts",
                                        "module": "PipesModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "PipesComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "PipesModule"
                            }
                        ]
                    },
                    {
                        "path": "parents",
                        "loadChildren": "./parents/parents.module#ParentsModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "ParentsModule"
                            }
                        ]
                    },
                    {
                        "path": "forms",
                        "loadChildren": "./forms/forms.module#AngularFormsModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/forms/forms.module.ts",
                                        "module": "AngularFormsModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "FormsComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "AngularFormsModule"
                            }
                        ]
                    },
                    {
                        "path": "maps",
                        "loadChildren": "./map/map.module#MapModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/map/map.module.ts",
                                        "module": "MapModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "MapComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "MapModule"
                            }
                        ]
                    },
                    {
                        "path": "**",
                        "component": "HomeComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "HttpLoaderFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/data-binding/data-binding.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DataBindingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/directives/directives/directives.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DirectivesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/forms/forms/forms.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FormsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/home/home.module.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "HttpLoaderFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/map/city/city.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CityComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/map/map/map.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MapComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/map/plaka/plaka.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PlakaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/map/region/region.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/navbar/navbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/parents/parent1/parent1.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Parent1Component",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/parents/parent2/parent2.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Parent2Component",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/pipes/pipes/pipes.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PipesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/role/role.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RoleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/sidebar/sidebar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidebarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/storage/cookie/cookie.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CookieComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/storage/local-storage/local-storage.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LocalStorageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/user/user-list/user-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/user/user/user-detail/user-detail.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserDetailComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/user/user/user-role/user-role.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserRoleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/user/user/user.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "UserComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/lib/chilld-components/child1/child1.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "Child1Component",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/lib/custom-directives/highlight.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "HighlightDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/lib/custom-pipes/filtering.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "FilteringPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/lib/custom-pipes/tl-convert.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "TlConvertPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/lib/custom-validators/blacklist.validator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BlacklistValidator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/lib/custom-validators/no-white-space.validator.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "WhiteSpaceValidator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/lib/custom-validators/user-name-exist.validator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "userNameExistValidator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/lib/guards/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/lib/guards/child-guard.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "ChildGuardGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/lib/guards/deactive-guard.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "DeactiveGuardGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/lib/interceptors/auth.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "AuthInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/lib/services/map.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MapService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/lib/services/map.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "city",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/lib/services/role.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RoleService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/lib/services/user.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "UserService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}